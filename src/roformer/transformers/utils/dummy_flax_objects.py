# This file is autogenerated by the command `make fix-copies`, do not edit.
from ..file_utils import requires_backends


class FlaxForcedBOSTokenLogitsProcessor:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])


class FlaxForcedEOSTokenLogitsProcessor:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])


class FlaxLogitsProcessor:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])


class FlaxLogitsProcessorList:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])


class FlaxLogitsWarper:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxMinLengthLogitsProcessor:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])


class FlaxTemperatureLogitsWarper:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxTopKLogitsWarper:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxTopPLogitsWarper:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxAlbertForMaskedLM:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxAlbertForMultipleChoice:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxAlbertForPreTraining:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxAlbertForQuestionAnswering:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxAlbertForSequenceClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxAlbertForTokenClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxAlbertModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxAlbertPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


FLAX_MODEL_FOR_CAUSAL_LM_MAPPING = None


FLAX_MODEL_FOR_IMAGE_CLASSIFICATION_MAPPING = None


FLAX_MODEL_FOR_MASKED_LM_MAPPING = None


FLAX_MODEL_FOR_MULTIPLE_CHOICE_MAPPING = None


FLAX_MODEL_FOR_NEXT_SENTENCE_PREDICTION_MAPPING = None


FLAX_MODEL_FOR_PRETRAINING_MAPPING = None


FLAX_MODEL_FOR_QUESTION_ANSWERING_MAPPING = None


FLAX_MODEL_FOR_SEQ_TO_SEQ_CAUSAL_LM_MAPPING = None


FLAX_MODEL_FOR_SEQUENCE_CLASSIFICATION_MAPPING = None


FLAX_MODEL_FOR_TOKEN_CLASSIFICATION_MAPPING = None


FLAX_MODEL_FOR_VISION_2_SEQ_MAPPING = None


FLAX_MODEL_MAPPING = None


class FlaxAutoModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxAutoModelForCausalLM:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxAutoModelForImageClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxAutoModelForMaskedLM:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxAutoModelForMultipleChoice:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxAutoModelForNextSentencePrediction:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxAutoModelForPreTraining:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxAutoModelForQuestionAnswering:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxAutoModelForSeq2SeqLM:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxAutoModelForSequenceClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxAutoModelForTokenClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxAutoModelForVision2Seq:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxBartForConditionalGeneration:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxBartForQuestionAnswering:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxBartForSequenceClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxBartModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxBartPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxBeitForImageClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxBeitForMaskedImageModeling:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxBeitModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxBeitPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxBertForMaskedLM:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxBertForMultipleChoice:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxBertForNextSentencePrediction:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxBertForPreTraining:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxBertForQuestionAnswering:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxBertForSequenceClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxBertForTokenClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxBertModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxBertPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxBigBirdForMaskedLM:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxBigBirdForMultipleChoice:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxBigBirdForPreTraining:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxBigBirdForQuestionAnswering:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxBigBirdForSequenceClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxBigBirdForTokenClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxBigBirdModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxBigBirdPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxBlenderbotForConditionalGeneration:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxBlenderbotModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxBlenderbotPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxBlenderbotSmallForConditionalGeneration:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxBlenderbotSmallModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxBlenderbotSmallPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxCLIPModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxCLIPPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxCLIPTextModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxCLIPTextPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxCLIPVisionModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxCLIPVisionPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxDistilBertForMaskedLM:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxDistilBertForMultipleChoice:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxDistilBertForQuestionAnswering:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxDistilBertForSequenceClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxDistilBertForTokenClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxDistilBertModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxDistilBertPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxElectraForMaskedLM:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxElectraForMultipleChoice:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxElectraForPreTraining:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxElectraForQuestionAnswering:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxElectraForSequenceClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxElectraForTokenClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxElectraModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxElectraPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxEncoderDecoderModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxGPT2LMHeadModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxGPT2Model:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxGPT2PreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxGPTNeoForCausalLM:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxGPTNeoModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxGPTNeoPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxGPTJForCausalLM:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxGPTJModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxGPTJPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxMarianModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxMarianMTModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxMarianPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxMBartForConditionalGeneration:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxMBartForQuestionAnswering:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxMBartForSequenceClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxMBartModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxMBartPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxMT5ForConditionalGeneration:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxMT5Model:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxPegasusForConditionalGeneration:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxPegasusModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxPegasusPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxRobertaForMaskedLM:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxRobertaForMultipleChoice:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxRobertaForQuestionAnswering:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxRobertaForSequenceClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxRobertaForTokenClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxRobertaModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxRobertaPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxT5ForConditionalGeneration:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxT5Model:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxT5PreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxVisionEncoderDecoderModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxVisionTextDualEncoderModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxViTForImageClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxViTModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxViTPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxWav2Vec2ForCTC:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxWav2Vec2ForPreTraining:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxWav2Vec2Model:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])


class FlaxWav2Vec2PreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["flax"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["flax"])

    def __call__(self, *args, **kwargs):
        requires_backends(self, ["flax"])
