# This file is autogenerated by the command `make fix-copies`, do not edit.
from ..file_utils import requires_backends


QDQBERT_PRETRAINED_MODEL_ARCHIVE_LIST = None


class QDQBertForMaskedLM:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["pytorch_quantization", "torch"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["pytorch_quantization", "torch"])

    def forward(self, *args, **kwargs):
        requires_backends(self, ["pytorch_quantization", "torch"])


class QDQBertForMultipleChoice:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["pytorch_quantization", "torch"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["pytorch_quantization", "torch"])

    def forward(self, *args, **kwargs):
        requires_backends(self, ["pytorch_quantization", "torch"])


class QDQBertForNextSentencePrediction:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["pytorch_quantization", "torch"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["pytorch_quantization", "torch"])

    def forward(self, *args, **kwargs):
        requires_backends(self, ["pytorch_quantization", "torch"])


class QDQBertForQuestionAnswering:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["pytorch_quantization", "torch"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["pytorch_quantization", "torch"])

    def forward(self, *args, **kwargs):
        requires_backends(self, ["pytorch_quantization", "torch"])


class QDQBertForSequenceClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["pytorch_quantization", "torch"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["pytorch_quantization", "torch"])

    def forward(self, *args, **kwargs):
        requires_backends(self, ["pytorch_quantization", "torch"])


class QDQBertForTokenClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["pytorch_quantization", "torch"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["pytorch_quantization", "torch"])

    def forward(self, *args, **kwargs):
        requires_backends(self, ["pytorch_quantization", "torch"])


class QDQBertLayer:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["pytorch_quantization", "torch"])


class QDQBertLMHeadModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["pytorch_quantization", "torch"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["pytorch_quantization", "torch"])

    def forward(self, *args, **kwargs):
        requires_backends(self, ["pytorch_quantization", "torch"])


class QDQBertModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["pytorch_quantization", "torch"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["pytorch_quantization", "torch"])

    def forward(self, *args, **kwargs):
        requires_backends(self, ["pytorch_quantization", "torch"])


class QDQBertPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["pytorch_quantization", "torch"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["pytorch_quantization", "torch"])

    def forward(self, *args, **kwargs):
        requires_backends(self, ["pytorch_quantization", "torch"])


def load_tf_weights_in_qdqbert(*args, **kwargs):
    requires_backends(load_tf_weights_in_qdqbert, ["pytorch_quantization", "torch"])
