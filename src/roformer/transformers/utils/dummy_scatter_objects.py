# This file is autogenerated by the command `make fix-copies`, do not edit.
from ..file_utils import requires_backends


TAPAS_PRETRAINED_MODEL_ARCHIVE_LIST = None


class TapasForMaskedLM:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["scatter"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["scatter"])

    def forward(self, *args, **kwargs):
        requires_backends(self, ["scatter"])


class TapasForQuestionAnswering:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["scatter"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["scatter"])

    def forward(self, *args, **kwargs):
        requires_backends(self, ["scatter"])


class TapasForSequenceClassification:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["scatter"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["scatter"])

    def forward(self, *args, **kwargs):
        requires_backends(self, ["scatter"])


class TapasModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["scatter"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["scatter"])

    def forward(self, *args, **kwargs):
        requires_backends(self, ["scatter"])


class TapasPreTrainedModel:
    def __init__(self, *args, **kwargs):
        requires_backends(self, ["scatter"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["scatter"])

    def forward(self, *args, **kwargs):
        requires_backends(self, ["scatter"])


def load_tf_weights_in_tapas(*args, **kwargs):
    requires_backends(load_tf_weights_in_tapas, ["scatter"])
